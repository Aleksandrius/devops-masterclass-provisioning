
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

ext {
  gitLabTokenFile = file('build/gitlab.token')
  gitLabProjectsFile = file('build/gitlab.projects.json')
  gitLabUsersFile = file('build/gitlab.users.json')
  gitLabCurlCommand = { String suffix ->
    "curl -s --header \"Content-Type: application/json\" --header \"PRIVATE-TOKEN: ${gitLabTokenFile.exists() ? gitLabTokenFile.text : ''}\" ${suffix}".toString()
  }
}

task getGitLabApiToken(group: 'Infrastructure preparation') { doLast {
  remoteSession {
    project.gitLabTokenFile.text = project.gitlabToken
  }
}}

task getGitLabProjects(dependsOn: getGitLabApiToken, group: 'Infrastructure preparation') { doLast {
  remoteSession {
    project.gitLabProjectsFile.text = exec(command: project.gitLabCurlCommand("http://localhost:8480/api/v4/projects?per_page=100")).output
  }
}}

task deleteGitLabProjects(dependsOn: [getGitLabApiToken, getGitLabProjects], group: 'Infrastructure preparation') { doLast {
  remoteSession {
    def projects = new JsonSlurper().parse(project.gitLabProjectsFile)
    projects.each {
      exec(command: project.gitLabCurlCommand("-XDELETE http://localhost:8480/api/v4/projects/${it.id}"))
    }
  }
}}

task getGitLabUsers(dependsOn: getGitLabApiToken, group: 'Infrastructure preparation') { doLast {
  remoteSession {
    project.gitLabUsersFile.text = exec(command: project.gitLabCurlCommand("http://localhost:8480/api/v4/users?per_page=100")).output
  }
}}

task deleteGitLabUsers(dependsOn: [getGitLabApiToken, getGitLabUsers], group: 'Infrastructure preparation') { doLast {
  remoteSession {
    def users = new JsonSlurper().parse(project.gitLabUsersFile)
    users.findAll{ it.username != 'root' && it.username != 'ghost' }.each {
      exec(command: project.gitLabCurlCommand("-XDELETE http://localhost:8480/api/v4/users/${it.id}"))
    }
  }
}}

deleteGitLabUsers.mustRunAfter deleteGitLabProjects

task createGitLabUsers(dependsOn: [getGitLabApiToken], group: 'Infrastructure preparation') { doLast {
  remoteSession {

    for (int i = 1; i <= studentCount.toInteger(); i++) {

      String studentN =  i.toString().padLeft(2, '0')

      JsonBuilder studentCreate = new JsonBuilder(
          "email": "student${studentN}@extremeautomation.io",
          "name": "student${studentN}",
          "username": "student${studentN}",
          "password": gitlabStudentPassword,
          "skip_confirmation": true
      )

      exec(command: project.gitLabCurlCommand("-XPOST http://localhost:8480/api/v4/users -d '${studentCreate}'"))

    }

    // Fetch new users
    project.gitLabUsersFile.text = exec(command: project.gitLabCurlCommand("http://localhost:8480/api/v4/users?per_page=100")).output

  }
}}

createGitLabUsers.mustRunAfter deleteGitLabUsers
createGitLabUsers.mustRunAfter deleteGitLabProjects

task createGitLabProjects(dependsOn: [getGitLabApiToken], group: 'Infrastructure preparation') { doLast {
  remoteSession {

    def users = new JsonSlurper().parse(project.gitLabUsersFile)
    users.findAll{ it.username != 'root' && it.username != 'ghost' }.each {

      JsonBuilder projectCreate = new JsonBuilder(
          "name": "${it.username}-code",
          "visibility": "public"
      )

      exec(command: project.gitLabCurlCommand("-XPOST http://localhost:8480/api/v4/projects/user/${it.id} -d '${projectCreate}'"))

    }

    // Fetch new projects
    project.gitLabProjectsFile.text = exec(command: project.gitLabCurlCommand("http://localhost:8480/api/v4/projects?per_page=100")).output

  }
}}

createGitLabProjects.mustRunAfter createGitLabUsers

task assignGitLabProjectPermissions(dependsOn: [getGitLabApiToken, getGitLabProjects, getGitLabUsers], group: 'Infrastructure preparation') { doLast {
  remoteSession {
    def projects = new JsonSlurper().parse(project.gitLabProjectsFile)
    def users = new JsonSlurper().parse(project.gitLabUsersFile)
    projects.each {

      String rootId = users.find { it.username == 'root' }.id
      JsonBuilder givePermission = new JsonBuilder(
          "user_id": rootId,
          "access_level": 40,
      )

      exec(command: project.gitLabCurlCommand("-XPOST http://localhost:8480/api/v4/projects/${it.id}/members -d '${givePermission}'"))

    }
  }
}}

assignGitLabProjectPermissions.mustRunAfter createGitLabProjects

task pushCodeToGitLabProjects(dependsOn: [getGitLabApiToken, getGitLabProjects], group: 'Infrastructure preparation') { doLast {
  remoteSession {
    def projects = new JsonSlurper().parse(project.gitLabProjectsFile)
    projects.each {

      JsonBuilder commitCreate = new JsonBuilder(
          "branch": "master",
          "author": "automator@extremeautomation.io",
          "content": file("jenkins/Jenkinsfile").text.replaceAll('"', '\\"'),
          "commit_message": "pipeline as code"
      )

      String output = exec(command: project.gitLabCurlCommand("-XPOST http://localhost:8480/api/v4/projects/${it.id}/repository/files/Jenkinsfile -d '${commitCreate}'")).output
      if (output.contains('already exists')) {
        exec(command: project.gitLabCurlCommand("-XPUT http://localhost:8480/api/v4/projects/${it.id}/repository/files/Jenkinsfile -d '${commitCreate}'"))
      }

    }
  }
}}

pushCodeToGitLabProjects.mustRunAfter createGitLabProjects
pushCodeToGitLabProjects.mustRunAfter assignGitLabProjectPermissions

task addSlackNotiferToGitLabProjects(dependsOn: [getGitLabApiToken, getGitLabProjects], group: 'Infrastructure preparation') { doLast {
  remoteSession {

    def projects = new JsonSlurper().parse(project.gitLabProjectsFile)

    JsonBuilder hookCreate = new JsonBuilder(
        "webhook": file("${projectDir}/secrets/slack.webhook.url").text.trim(),
        "channel": "#operations",
    )

    projects.each {
      exec(command: project.gitLabCurlCommand("-XPUT http://localhost:8480/api/v4/projects/${it.id}/services/slack -d '${hookCreate}'"))
    }

  }
}}

addSlackNotiferToGitLabProjects.mustRunAfter createGitLabProjects
addSlackNotiferToGitLabProjects.mustRunAfter pushCodeToGitLabProjects

task pullGitLabProjects(dependsOn: [getGitLabApiToken, getGitLabProjects], group: 'Infrastructure shutdown') { doLast {
  remoteSession {
    def projects = new JsonSlurper().parse(project.gitLabProjectsFile)
    projects.each {
      exec(command: "mkdir -p /tmp/source/${it.namespace.path}")
      if (ok("test -d /tmp/source/${it.path_with_namespace}")) {
        exec(command: "git -C /tmp/source/${it.path_with_namespace} pull --all", failOnError: false)
      } else {
        exec(command: "git clone http://localhost:8480/${it.path_with_namespace}.git /tmp/source/${it.path_with_namespace}")
      }
    }
    exec "rm -rf /tmp/source.zip"
    exec "zip -q -r /tmp/source.zip /tmp/source"
    scp {
      from { remoteFile "/tmp/source.zip" }
      into { localDir buildDir }
    }
  }
}}


task initializeGitLab(dependsOn: [
    deleteGitLabProjects,
    deleteGitLabUsers,
    createGitLabUsers,
    createGitLabProjects,
    assignGitLabProjectPermissions,
    pushCodeToGitLabProjects,
    addSlackNotiferToGitLabProjects,
], group: 'Infrastructure preparation')


