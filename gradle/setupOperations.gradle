
task updateApt(group: 'Infrastructure preparation') { doLast {
  remoteSession {
    exec "sudo apt-get update -y"
  }
}}

task setHostname(group: 'Infrastructure preparation') { doLast {
  remoteSession {
    exec "sudo -- sh -c 'echo ${serverHostName} > /etc/hostname'"
    exec "sudo sed -i 's/^127.0.0.1.*\$/127.0.0.1 ${serverHostName} localhost/' /etc/hosts"
    exec "sudo hostname ${serverHostName}"
  }
}}

task activateTerminationProtection(type: Exec, group: 'Infrastructure preparation') {
  commandLine "aws", "ec2", "modify-instance-attribute", "--instance-id", project.getServerInstanceId(), "--disable-api-termination"
}

task initializeKibana(group: 'Infrastructure preparation') { doLast {
  remoteSession {
    exec "curl --header 'content-type: application/json' -XPUT 'http://127.0.0.1:9200/.kibana/index-pattern/metricbeat-*' -d '{\"title\" : \"metricbeat-*\",  \"timeFieldName\": \"@timestamp\"}'"
    exec "curl --header 'content-type: application/json' -XPUT 'http://127.0.0.1:9200/.kibana/index-pattern/packetbeat-*' -d '{\"title\" : \"packetbeat-*\",  \"timeFieldName\": \"@timestamp\"}'"
    exec "curl --header 'content-type: application/json' -XPUT 'http://127.0.0.1:9200/.kibana/index-pattern/filebeat-*' -d '{\"title\" : \"filebeat-*\",  \"timeFieldName\": \"@timestamp\"}'"
    exec "curl --header 'content-type: application/json' -XPUT 'http://127.0.0.1:9200/.kibana/index-pattern/logstash-*' -d '{\"title\" : \"logstash-*\",  \"timeFieldName\": \"@timestamp\"}'"
    exec "curl --header 'content-type: application/json' -XPUT 'http://127.0.0.1:9200/.kibana/index-pattern/auditbeat-*' -d '{\"title\" : \"auditbeat-*\",  \"timeFieldName\": \"@timestamp\"}'"
    exec "curl --header 'content-type: application/json' -XPUT http://127.0.0.1:9200/.kibana/config -d '{\"defaultIndex\" : \"metricbeat-*\"}'"
    exec "sudo curl -Lso /usr/share/metricbeat/beats-dashboards.zip https://artifacts.elastic.co/downloads/beats/beats-dashboards/beats-dashboards-${kibanaVersion}.zip"
    exec "/usr/share/metricbeat/scripts/import_dashboards -beat \"\" -file /usr/share/metricbeat/beats-dashboards.zip -es http://localhost:9200"
  }
}}

task initializeRancher(group: 'Infrastructure preparation') { doLast {
  remoteSession {
    // TODO: initialize rancher (currently manual step)
    def result = exec(command: "curl -s http://localhost:8700/v1/registrationtokens | jq -r .data[0].command")
    String rancherInitCommand = result.output.trim().replaceAll('docker run', "docker run --add-host rancher.extremeautomation.io:${project.getServerIp()}")
    exec(command: rancherInitCommand)
  }
}}
